PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    Karloff analisador = new Karloff(new FileInputStream(args[0]));
    analisador.Karloff();
  }

}
PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <PONTOVIRG: ";">
| <VIRGULA: ",">
| <IGUAL: "=">

| <AND: "&&">
| <OR: "||"> 
| <NOT: "!">

| <ANDBIT: "&">
| <ORBIT: "|">
| <XORBIT: "^">
| <COMPLEMENTO1: "~">
| <DESLOCESQ: "<<">
| <DESLOCDIR: ">>">

| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <MOD: "%">

| <INCREMENTO: "++">
| <DECREMENTO: "--">

| <MENOR: "<">
| <MAIOR: ">">
| <MENORIGUAL: "<=">
| <MAIORIGUAL: ">=">
| <IGUALDADE: "==">
| <DIFERENTE: "!=">

| <ATTRADD: "+=">
| <ATTRSUB: "-=">
| <ATTRMULT: "*=">
| <ATTRDIV: "/=">
| <ATTRMOD: "%=">
| <ATTRDESESQ: "<<=">
| <ATTRDESDIR: ">>=">
| <ATTRANDBIN: "&=">
| <ATTRORBIN: "|=">
| <ATTRXORBIN: "^=">

| <CONDICIONAL: "?">
| <DOISPONTOS: ":">
}

TOKEN :
{
  <NUM : (["0"-"9"])+ ( "." (["0"-"9"])+ )? >
| < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* >
}

void Karloff () :
{Token t;}
{
(
  <MAIN> { System.out.println("Palavra reservada: main");}
| <ACHAVES> { System.out.println("Abre chaves: {");}
| <FCHAVES> { System.out.println("Fecha chaves: }");}
| <APARENTESES> { System.out.println("Abre parenteses: (");}
| <FPARENTESES> { System.out.println("Fecha parenteses: )");}
| <PONTOVIRG> { System.out.println("Ponto e virgula: ;");}
| <VIRGULA> { System.out.println("Vírgula: ,");}
| <IGUAL> { System.out.println("Igual: =");}
| <AND> { System.out.println("Operador lógico AND: &&");}
| <OR> { System.out.println("Operador lógico OR: ||");}
| <NOT> { System.out.println("Operador lógico NOT: !");}
| <ANDBIT> { System.out.println("Operador bit a bit AND: &");}
| <ORBIT> { System.out.println("Operador bit a bit OR: |");}
| <XORBIT> { System.out.println("Operador bit a bit XOR: ^");}
| <COMPLEMENTO1> { System.out.println("Operador complemento: ~");}
| <DESLOCESQ> { System.out.println("Operador deslocamento à esquerda: <<");}
| <DESLOCDIR> { System.out.println("Operador deslocamento à direita: >>");}
| <SOMA> { System.out.println("Operador de soma: +");}
| <SUB> { System.out.println("Operador de subtração: -");}
| <MULT> { System.out.println("Operador de multiplicação: *");}
| <DIV> { System.out.println("Operador de divisão: /");}
| <MOD> { System.out.println("Operador de módulo: %");}
| <INCREMENTO> { System.out.println("Operador de incremento: ++");}
| <DECREMENTO> { System.out.println("Operador de decremento: --");}
| <MENOR> { System.out.println("Operador de menor: <");}
| <MAIOR> { System.out.println("Operador de maior: >");}
| <MENORIGUAL> { System.out.println("Operador de menor ou igual: <=");}
| <MAIORIGUAL> { System.out.println("Operador de maior ou igual: >=");}
| <IGUALDADE> { System.out.println("Operador de igualdade: ==");}
| <DIFERENTE> { System.out.println("Operador de diferente: !=");}
| <ATTRADD> { System.out.println("Operador de atribuição e adição: +=");}
| <ATTRSUB> { System.out.println("Operador de atribuição e subtração: -=");}
| <ATTRMULT> { System.out.println("Operador de atribuição e multiplicação: *=");}
| <ATTRDIV> { System.out.println("Operador de atribuição e divisão: /=");}
| <ATTRMOD> { System.out.println("Operador de atribuição e módulo: %=");}
| <ATTRDESESQ> { System.out.println("Operador de atribuição e deslocamento à esquerda: <<=");}
| <ATTRDESDIR> { System.out.println("Operador de atribuição e deslocamento à direita: >>=");}
| <ATTRANDBIN> { System.out.println("Operador de atribuição e AND bit a bit: &=");}
| <ATTRORBIN> { System.out.println("Operador de atribuição e OR bit a bit: |=");}
| <ATTRXORBIN> { System.out.println("Operador de atribuição e XOR bit a bit: ^=");}
| <CONDICIONAL> { System.out.println("Operador condicional: ?");}
| <DOISPONTOS> { System.out.println("Dois pontos: :");}
| t=<NUM> { System.out.println("Número: " + t.image);}
| t=<ID> { System.out.println("Identificador: " + t.image);}
)*
<EOF>
}
