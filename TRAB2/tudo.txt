#include <stdio.h>

// Funções para operadores lógicos
void operadoresLogicos() {
    int a = 5, b = 3;

    if (a && b) {
        printf("Ambos são verdadeiros\n");
    }

    if (a || b) {
        printf("Pelo menos um é verdadeiro\n");
    }

    if (!(a && b)) {
        printf("Negação de ambos são verdadeiros\n");
    }
}

// Funções para operadores bitwise
void operadoresBitwise() {
    int a = 6, b = 5, c;

    c = a & b;     // AND bit-a-bit
    printf("AND bit-a-bit: %d\n", c);

    c = a | b;     // OR bit-a-bit
    printf("OR bit-a-bit: %d\n", c);

    c = a ^ b;     // XOR bit-a-bit
    printf("XOR bit-a-bit: %d\n", c);

    c = ~a;        // Complemento de 1
    printf("Complemento de 1 de a: %d\n", c);

    c = a << 2;    // Desloca à esquerda N bits
    printf("Desloca à esquerda: %d\n", c);

    c = b >> 1;    // Desloca à direita N bits
    printf("Desloca à direita: %d\n", c);
}

// Funções para operadores aritméticos
void operadoresAritmeticos() {
    int a = 5, b = 3, c;

    c = a + b;     // Soma
    printf("Soma: %d\n", c);

    c = a - b;     // Subtração
    printf("Subtração: %d\n", c);

    c = a * b;     // Multiplicação
    printf("Multiplicação: %d\n", c);

    c = a / b;     // Divisão inteira
    printf("Divisão inteira: %d\n", c);

    c = a % b;     // Resto da divisão
    printf("Resto da divisão: %d\n", c);
}

// Funções para operadores de atribuição
void operadoresAtribuicao() {
    int c = 10;

    c += 5;        // Atribuição com adição
    printf("Atribuição com adição: %d\n", c);

    c -= 2;        // Atribuição com subtração
    printf("Atribuição com subtração: %d\n", c);

    c *= 3;        // Atribuição com multiplicação
    printf("Atribuição com multiplicação: %d\n", c);

    c /= 2;        // Atribuição com divisão
    printf("Atribuição com divisão: %d\n", c);

    c %= 3;        // Atribuição com resto da divisão
    printf("Atribuição com resto da divisão: %d\n", c);

    c <<= 2;       // Atribuição com deslocamento à esquerda
    printf("Atribuição com deslocamento à esquerda: %d\n", c);

    c >>= 1;       // Atribuição com deslocamento à direita
    printf("Atribuição com deslocamento à direita: %d\n", c);

    c &= 2;        // Atribuição com AND binário
    printf("Atribuição com AND binário: %d\n", c);

    c |= 5;        // Atribuição com OR binário
    printf("Atribuição com OR binário: %d\n", c);

    c ^= 3;        // Atribuição com XOR binário
    printf("Atribuição com XOR binário: %d\n", c);
}

// Funções para operadores relacionais
void operadoresRelacionais() {
    int a = 5, b = 3;

    if (a < b) {
        printf("%d é menor que %d\n", a, b);
    }

    if (a >= b) {
        printf("%d é maior ou igual a %d\n", a, b);
    }

    if (a == b) {
        printf("%d é igual a %d\n", a, b);
    }

    if (a != b) {
        printf("%d é diferente de %d\n", a, b);
    }
}

// Função principal
int main() {
    // Chama as funções que demonstram cada tipo de operador
    printf("Operadores Lógicos:\n");
    operadoresLogicos();
    printf("\n");

    printf("Operadores Bitwise:\n");
    operadoresBitwise();
    printf("\n");

    printf("Operadores Aritméticos:\n");
    operadoresAritmeticos();
    printf("\n");

    printf("Operadores de Atribuição:\n");
    operadoresAtribuicao();
    printf("\n");

    printf("Operadores Relacionais:\n");
    operadoresRelacionais();
    printf("\n");

    return 0;
}

