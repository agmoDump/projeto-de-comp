PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException, IOException {
    Karloff analisador = new Karloff(new FileInputStream(args[0]));
    analisador.Karloff();
  }

}
PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <PONTOVIRG: ";">
| <VIRGULA: ",">
| <IGUAL: "=">

| <AND: "&&">
| <OR: "||"> 
| <NOT: "!">

| <ANDBIT: "&">
| <ORBIT: "|">
| <XORBIT: "^">
| <COMPLEMENTO1: "~">
| <DESLOCESQ: "<<">
| <DESLOCDIR: ">>">

| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <MOD: "%">

| <INCREMENTO: "++">
| <DECREMENTO: "--">

| <MENOR: "<">
| <MAIOR: ">">
| <MENORIGUAL: "<=">
| <MAIORIGUAL: ">=">
| <IGUALDADE: "==">
| <DIFERENTE: "!=">

| <ATTRADD: "+=">
| <ATTRSUB: "-=">
| <ATTRMULT: "*=">
| <ATTRDIV: "/=">
| <ATTRMOD: "%=">
| <ATTRDESESQ: "<<=">
| <ATTRDESDIR: ">>=">
| <ATTRANDBIN: "&=">
| <ATTRORBIN: "|=">
| <ATTRXORBIN: "^=">

| <CONDICIONAL: "?">
| <DOISPONTOS: ":">

| <NEWVAR: "new">
| <FLOAT: "float">
| <BOOL: "boolean">
| <VOID: "void">

| <IF: "if">
| <THEN: "then">
| <ELSE: "else">

| <WHILE: "while">
| <READ: "read">
| <RETURN: "return">
| <PRINT: "print">

| <VERDADEIRO: "true">
| <FALSO: "false">
}

TOKEN :
{
  <TYPE: "int" | "float" | "boolean" | "void">
| <NUM: (["0"-"9"])+ ("." (["0"-"9"])+ )? >
| <ID: ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z", "0"-"9"] )* >
}

void Karloff() :
{}
{
    MainDeclaracao() (FuncaoDeclaracao())?
    <EOF> 
}

void MainDeclaracao() :
{}
{
    <MAIN> <APARENTESES> <FPARENTESES> <ACHAVES> VariavelDeclaracao() ComandoSequencia() <FCHAVES>
}

void VariavelDeclaracao() :
{}
{
    ( <NEWVAR> Tipo() <ID> <PONTOVIRG> )*
}

void Tipo() :
{}
{
    <FLOAT> | <BOOL> | <VOID> | <TYPE>
}

void ComandoSequencia() :
{}
{
    ( Comando() (<PONTOVIRG> Comando())* )
}

void Comando() :
{}
{
    ComandoAtribuicao()
    | ComandoCondicional()
    | ComandoLoop()
    | ComandoLeitura()
    | ComandoRetorno()
    | ComandoImpressao()
}

void ComandoAtribuicao() :
{}
{
    <ID> <IGUAL> ( Expressao() | ComandoLeitura() )
}

void ComandoCondicional() :
{}
{
    <IF> Expressao() <THEN> <ACHAVES> ComandoSequencia() <FCHAVES> ( <ELSE> <ACHAVES> ComandoSequencia() <FCHAVES> )?
}

void ComandoLoop() :
{}
{
    <WHILE> Expressao() <ACHAVES> ComandoSequencia() <FCHAVES>
}

void ComandoLeitura() :
{}
{
    <READ> <APARENTESES> <FPARENTESES>
}

void ComandoRetorno() :
{}
{
    <RETURN> Expressao()
}

void ComandoImpressao() :
{}
{
    <PRINT> Expressao()
}

void Expressao() :
{}
{
    Termo() ( ( <SOMA> | <SUB> ) Termo() )*
}

void Termo() :
{}
{
    Fator() ( ( <MULT> | <DIV> | <MOD> ) Fator() )*
}

void Fator() :
{}
{
    ChamadaFuncao()
    | <NUM>
    | <VERDADEIRO>
    | <FALSO>
}

void ChamadaFuncao() :
{}
{
    <ID> ( <APARENTESES> (ExpressaoLista())? <FPARENTESES> )?
}

void ExpressaoLista() :
{}
{
    Expressao() ( <VIRGULA> Expressao() )*
}

void FuncaoDeclaracao() : 
{}
{
    <TYPE> <ID> <APARENTESES> ( Parametros() )? <FPARENTESES> <ACHAVES> VariavelDeclaracao() ComandoSequencia() <FCHAVES>
}

void Parametros() :
{}
{
    Parametro() ( <VIRGULA> Parametro() )*
}

void Parametro() :
{}
{
    Tipo() <ID>
}
