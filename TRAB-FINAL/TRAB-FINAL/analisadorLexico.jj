PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    Karloff analisador = new Karloff(new FileInputStream(args[0]));
    analisador.Karloff();
  }

}
PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <PONTOVIRG: ";">
| <VIRGULA: ",">
| <IGUAL: "=">

| <AND: "&">
| <OR: "|">

| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">

| <MENOR: "<">
| <MAIOR: ">">
| <IGUALDADE: "==">

| <NEWVAR: "newVar">
| <FLOAT: "float">
| <BOOL: "boolean">
| <VOID: "void">

| <IF: "if">
| <THEN: "then">

| <WHILE: "while">
| <READ: "readInput">
| <RETURN: "return">
| <PRINT: "printOut">

| <VERDADEIRO: "true">
| <FALSO: "false">

| <FUNCAO: "fun">
}

TOKEN :
{
  <NUM: (["0"-"9"])+ ("." (["0"-"9"])+ )? ("E" ("+" | "-")? (["0"-"9"]))? >
| <ID: ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z", "0"-"9"] )* ( ( "_" )  ( ["a"-"z", "A"-"Z", "0"-"9"] )+ )* >
}

void Karloff () :
{Token t;}
{
(
  <MAIN> { System.out.println("Palavra reservada: main");}
| <ACHAVES> { System.out.println("Abre chaves: {");}
| <FCHAVES> { System.out.println("Fecha chaves: }");}
| <APARENTESES> { System.out.println("Abre parenteses: (");}
| <FPARENTESES> { System.out.println("Fecha parenteses: )");}
| <PONTOVIRG> { System.out.println("Ponto e virgula: ;");}
| <VIRGULA> { System.out.println("Vírgula: ,");}
| <IGUAL> { System.out.println("Igual: =");}
| <AND> { System.out.println("Operador lógico AND: &");}
| <OR> { System.out.println("Operador lógico OR: |");}
| <SOMA> { System.out.println("Operador de soma: +");}
| <SUB> { System.out.println("Operador de subtração: -");}
| <MULT> { System.out.println("Operador de multiplicação: *");}
| <DIV> { System.out.println("Operador de divisão: /");}
| <MENOR> { System.out.println("Operador de menor: <");}
| <MAIOR> { System.out.println("Operador de maior: >");}
| <IGUALDADE> { System.out.println("Operador de igualdade: ==");}
| <NEWVAR> { System.out.println("Palavra reservada: newVar");}
| <FLOAT> { System.out.println("Palavra reservada: float");}
| <BOOL> { System.out.println("Palavra reservada: boolean");}
| <VOID> { System.out.println("Palavra reservada: void");}
| <IF> { System.out.println("Palavra reservada: if");}
| <THEN> { System.out.println("Palavra reservada: then");}
| <WHILE> { System.out.println("Palavra reservada: while");}
| <READ> { System.out.println("Palavra reservada: readInput");}
| <RETURN> { System.out.println("Palavra reservada: return");}
| <PRINT> { System.out.println("Palavra reservada: printOut");}
| <VERDADEIRO> { System.out.println("Palavra reservada: true");}
| <FALSO> { System.out.println("Palavra reservada: false");}
| <FUNCAO> { System.out.println("Palavra reservada: fun");}
| t=<NUM> { System.out.println("Número: " + t.image);}
| t=<ID> { System.out.println("Identificador: " + t.image);}
)*
<EOF>
}
